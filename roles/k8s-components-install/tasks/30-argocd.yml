---
- name: Ensure Helm is installed
  ansible.builtin.command: helm version
  register: helm_check
  failed_when: helm_check.rc != 0
  changed_when: false

- name: Check if argocd is already installed
  ansible.builtin.shell: |
    helm list -n {{ helm_argocd_namespace | default('argocd') }} --kubeconfig {{ k8s_config_path }} | grep -w argocd
  register: argocd_installed
  failed_when: false
  changed_when: false
  tags:
    - argocd-cm

- name: Set fact whether to skip argocd install
  ansible.builtin.set_fact:
    skip_argocd_install: "{{ argocd_installed.rc == 0 and (not argocd_force_install | default(false)) }}"
  tags:
    - argocd-cm

- name: Add argocd Helm repository
  ansible.builtin.command: helm repo add argo https://argoproj.github.io/argo-helm
  register: helm_argocd_repo
  changed_when: "'\"has been added\"' in helm_argocd_repo.stdout"
  when: not skip_argocd_install

- name: Update Helm repos
  ansible.builtin.command: helm repo update
  when: not skip_argocd_install

### Whitelist workers in argocd

- name: Init resolved_addresses
  ansible.builtin.set_fact:
    resolved_addresses: []
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Build hostname list from master and worker groups
  ansible.builtin.set_fact:
    argocd_hostnames: "{{ groups[k8s_master_group_name] + groups[k8s_worker_group_name] }}"
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Resolve each hostname to IPs
  ansible.builtin.shell: |
    getent ahosts {{ item }} | awk '{print $1}' | sort -u
  register: host_ips
  changed_when: false
  loop: "{{ argocd_hostnames }}"
  loop_control:
    label: "{{ item }}"
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Build resolved_addresses list (with CIDR notation)
  ansible.builtin.set_fact:
    resolved_addresses: "{{ resolved_addresses + new_entries }}"
  vars:
    new_entries: >-
      {{
        item.stdout_lines
        | map('regex_replace', '^(.*)$', '\1')
        | map('regex_replace', '^(.*:.*)$', '\1/128')
        | map('regex_replace', '^([0-9.]+)$', '\1/32')
        | list
      }}
  loop: "{{ host_ips.results }}"
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Merge with predefined argocd_ingress_whitelist
  ansible.builtin.set_fact:
    argocd_ingress_whitelist: "{{ (resolved_addresses + (argocd_ingress_whitelist | default([]))) | unique }}"
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Show final whitelist
  ansible.builtin.debug:
    var: argocd_ingress_whitelist
  when: not skip_argocd_install and argocd_workers_ingress_whitelist | default(false)

- name: Create values config from template
  ansible.builtin.template:
    src: "argocd-values.yaml.j2"
    dest: /tmp/argocd-values.yaml
    mode: "0644"
  when: not skip_argocd_install

- name: Install argocd via Helm
  ansible.builtin.command: >
    helm upgrade --install argocd argo/argo-cd
    --namespace {{ helm_argocd_namespace | default('argocd') }}
    --version {{ helm_argocd_version | default('8.0.17') }}
    --kubeconfig {{ k8s_config_path }}
    --create-namespace
    --values /tmp/argocd-values.yaml
  when: not skip_argocd_install or argocd_force_install is defined

- name: Create  argocd cm
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /tmp/{{ item }}
    mode: "0600"
  when: (skip_argocd_install and argocd_github_enabled is defined) or argocd_force_install is defined
  with_items:
    - argocd-cm.yml
    - argocd-rbac-cm.yml
    - argocd-projects.yml
  tags:
    - argocd-cm


- name: Install argocd cm for github
  ansible.builtin.command: >
    kubectl apply -f /tmp/{{ item }}
    --namespace {{ helm_argocd_namespace | default('argocd') }}
    --kubeconfig {{ k8s_config_path }}
  when: (skip_argocd_install and argocd_github_enabled is defined) or argocd_force_install is defined
  with_items:
    - argocd-cm.yml
    - argocd-rbac-cm.yml
    - argocd-projects.yml
  tags:
    - argocd-cm


- name: Create argocd ingress cert
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /tmp/{{ item }}
    mode: "0600"
  when: (skip_argocd_install and argocd_acme is defined) or (argocd_force_install and argocd_acme is defined)
  with_items:
    - argocd-cert.yaml
  tags:
    - argocd-cert


- name: Install argocd ingress cert
  ansible.builtin.command: >
    kubectl apply -f /tmp/{{ item }}
    --namespace {{ helm_argocd_namespace | default('argocd') }}
    --kubeconfig {{ k8s_config_path }}
  when: (skip_argocd_install and argocd_acme is defined) or (argocd_force_install and argocd_acme is defined)
  with_items:
    - argocd-cert.yaml
  tags:
    - argocd-cert


- name: remove argo-cm
  ansible.builtin.file:
    path: /tmp/{{ item }}
    state: absent
  with_items:
    - argocd-cm.yml
    - argocd-rbac-cm.yml
    - argocd-projects.yml
    - argocd-cert.yaml
  tags:
    - argocd-cm

### Register self cluster

- name: Set cluster name
  ansible.builtin.set_fact:
    cluster_name: "{{ k8s_cls_name | default(inventory_hostname) }}"
  when: argocd_self_cluster_add | default(false)


- name: Render Argo CD SA access manifest
  ansible.builtin.template:
    src: argocd-cluster-access.yaml.j2
    dest: /tmp/argocd-cluster-access.yaml
    mode: "0644"
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Apply cluster access manifest
  ansible.builtin.command: >
    kubectl apply -f /tmp/argocd-cluster-access.yaml
    --kubeconfig {{ k8s_config_path }}
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Get cluster API server
  ansible.builtin.command: >
    kubectl config view --kubeconfig {{ k8s_config_path }} --minify -o jsonpath='{.clusters[0].cluster.server}'
  register: cluster_api_out
  changed_when: false
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Set cluster API
  ansible.builtin.set_fact:
    cluster_api: "{{ cluster_api_out.stdout }}"
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Create access token for Argo CD SA (K8s â‰¥1.24)
  ansible.builtin.command: >
    kubectl -n kube-system create token argocd-cluster-access --kubeconfig {{ k8s_config_path }}
  register: cluster_token_out
  changed_when: false
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Set cluster token
  ansible.builtin.set_fact:
    cluster_token: "{{ cluster_token_out.stdout }}"
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Get cluster CA (already base64 encoded)
  ansible.builtin.command: >
    kubectl config view --kubeconfig {{ k8s_config_path }} --raw --minify -o jsonpath='{.clusters[0].cluster.certificate-authority-data}'
  register: cluster_ca_out
  changed_when: false
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Set cluster CA
  ansible.builtin.set_fact:
    cluster_ca: "{{ cluster_ca_out.stdout }}"
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Check if cluster is already registered in Argo CD
  ansible.builtin.command: >
    kubectl get secret -n {{ helm_argocd_namespace | default('argocd') }}
  register: argocd_existing_secrets
  changed_when: false
  failed_when: false
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))


- name: Render Argo CD cluster registration secret
  ansible.builtin.template:
    src: argocd-cluster-secret.yaml.j2
    dest: /tmp/argocd-cluster-secret.yaml
    mode: "0600"
  when:
    - ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))
    - "'cluster-' + cluster_name not in argocd_existing_secrets.stdout"


- name: Apply Argo CD cluster registration secret
  ansible.builtin.command: >
    kubectl apply -f /tmp/argocd-cluster-secret.yaml
    --kubeconfig {{ k8s_config_path }}
  when:
    - ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))
    - "'cluster-' + cluster_name not in argocd_existing_secrets.stdout"


- name: Remove temp files
  ansible.builtin.file:
    path: /tmp/{{ item }}
    state: absent
  with_items:
    - argocd-cluster-access.yaml
    - argocd-cluster-secret.yaml
  when: ((skip_argocd_install and argocd_self_cluster_add | default(false)) or argocd_force_install | default(false))

### Add repository

- name: Ensure directory for rendered secrets exists
  ansible.builtin.file:
    path: /tmp/argocd-repos
    state: directory
    mode: '0700'
  when: ((skip_argocd_install and argocd_repo_list | default(false)) or argocd_force_install | default(false))


- name: Render Argo CD repository secrets
  ansible.builtin.template:
    src: argocd-repo-secret.yaml.j2
    dest: "/tmp/argocd-repos/repo-{{ item.name }}.yaml"
    mode: '0600'
  loop: "{{ argocd_repo_list }}"
  loop_control:
    label: "{{ item.name }}"
  when: ((skip_argocd_install and argocd_repo_list | default(false)) or argocd_force_install | default(false))


- name: Apply Argo CD repository secrets
  ansible.builtin.command: >
    kubectl apply -f /tmp/argocd-repos/repo-{{ item.name }}.yaml
    --kubeconfig {{ k8s_config_path }}
  loop: "{{ argocd_repo_list }}"
  loop_control:
    label: "{{ item.name }}"
  when: ((skip_argocd_install and argocd_repo_list | default(false)) or argocd_force_install | default(false))


- name: Clean up rendered repo secrets
  ansible.builtin.file:
    path: "/tmp/argocd-repos/repo-{{ item.name }}.yaml"
    state: absent
  loop: "{{ argocd_repo_list }}"
  loop_control:
    label: "{{ item.name }}"
  when: ((skip_argocd_install and argocd_repo_list | default(false)) or argocd_force_install | default(false))


# - name: Create  teleport-manifest
#   ansible.builtin.template:
#     src: "argocd-svc.yml.j2"
#     dest: /tmp/argocd-svc.yml
#     mode: "0644"
#   when: argocd_teleport is defined
#   tags:
#     - argocd-svc

# - name: Install teleport manifest
#   ansible.builtin.command: >
#     kubectl apply -f /tmp/argocd-svc.yml
#     --namespace {{ helm_argocd_namespace | default('argocd') }}
#     --kubeconfig {{ k8s_config_path }}
#   when: argocd_teleport is defined or argocd_force_install is defined
#   tags:
#     - argocd-svc
