---
- name: debug print launch command
  ansible.builtin.debug:
    msg:
      - "command for launch: {{mytonctrl_install_path}} -b {{repo_version}} -n {{ton_network}} -v {{ton_node_version}}"

- name: install ton-node and mytonctrl - takes approximately 20 minutes
  ansible.builtin.shell: "{{mytonctrl_install_path}} -b {{repo_version}} -n {{ton_network}} -v {{ton_node_version}} > /tmp/ton-node-install-{{ ansible_date_time.iso8601_basic_short }}.log 2>&1"
#  async: 1800  # timeout seconds (30 минут)
#  poll: 5  # check status every 5 sec
#  register: async_result

#- name: Execute long-running script asynchronously
#  ansible.builtin.command: >
#    "{{ mytonctrl_install_path }} -b {{ repo_version }} -n {{ ton_network }} -v {{ ton_node_version }} > /tmp/ton-node-install-{{ ansible_date_time.iso8601 }}.log 2>&1"
#  args:
#    chdir: /tmp
#  async: 1800
#  poll: 5
#  register: async_result
#
#- name: debug async
#  ansible.builtin.debug:
#    msg:
#      - "debug async: {{async_result}}"
#
#
#- name: Wait for async job to finish
#  async_status:
#    jid: "{{ async_result.ansible_job_id }}"
#  register: job_result
#  until: job_result.finished
#  retries: 360
#  delay: 5
#  ignore_errors: true
#
#- name: Print output to Ansible console
#  debug:
#    var: job_result.stdout
#  when: job_result.stdout is defined
#
#- name: Check script result
#  debug:
#    msg: "Script completed successfully"
#  when: job_result.rc == 0
#
#- name: Fail if script failed
#  fail:
#    msg: "Script failed"
#  when: job_result.rc != 0
