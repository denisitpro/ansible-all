---
- name: install requirement software - ccentos
  yum:
    name:
      - jq
  when: ansible_distribution == 'CentOS'

- name: install requirement software -  ubuntu
  apt:
    name:
      - jq
  when: ansible_distribution == 'Ubuntu'

- name: curl get access token
  shell: 'curl -s --request POST --data ''{"password": "{{vault_password}}"}'' {{vault_url}}/v1/auth/ldap/login/{{vault_login}} | jq ".auth" | jq -r ".client_token"'
  args:
    warn: false
  register: vault_access_token

#- name: debug token vars
#  debug: msg="{{vault_access_token.stdout}}"

####### section wild

- name: curl get certs - wild
  shell: "{{curl_get_wild_cert}} > {{nginx_tmp_wild}}/{{item.domain}}-cert.pem"
  args:
    warn: false
  register: cert_out
  when: item.cert_type == 'wild'
  with_items: "{{ nginx.vhosts }}"

- name: curl get privkey - wild
  shell: "{{curl_get_wild_key}} > {{nginx_tmp_wild}}/{{item.domain}}-priv.pem"
  args:
    warn: false
  register: cert_out
  when: item.cert_type == 'wild'
  with_items: "{{ nginx.vhosts }}"

- name: copy wildcard cers
  copy:
    src: "{{nginx_tmp_wild}}/{{item.domain}}-cert.pem"
    dest: "{{nginx_ssl_path}}/{{item.domain}}/{{item.certname}}"
    owner: root
    group: root
    mode: 0600
    remote_src: yes
    force: "{{item.ssl_rewrite}}"
  when: item.cert_type == 'wild'
  with_items: "{{ nginx.vhosts }}"
  notify: reload nginx

- name: copy wildcard privkey
  copy:
    src: "{{nginx_tmp_wild}}/{{item.domain}}-priv.pem"
    dest: "{{nginx_ssl_path}}/{{item.domain}}/{{item.privkey}}"
    owner: root
    group: root
    mode: 0600
    remote_src: yes
    force: "{{item.ssl_rewrite}}"
  when: item.cert_type == 'wild'
  with_items: "{{ nginx.vhosts }}"
  notify: reload nginx



####### section personal

- name: curl get certs - personal
  shell: "{{curl_get_personal_cert}} > {{nginx_tmp_personal}}/{{item.servername}}-cert.pem"
  args:
    warn: false
  register: cert_out
  when: item.cert_type == 'personal'
  with_items: "{{ nginx.vhosts }}"

- name: curl get privkey - personal
  shell: "{{curl_get_personal_key}} > {{nginx_tmp_personal}}/{{item.servername}}-priv.pem"
  args:
    warn: false
  register: cert_out
  when: item.cert_type == 'personal'
  with_items: "{{ nginx.vhosts }}"

- name: copy personal cers
  copy:
    src: "{{nginx_tmp_personal}}/{{item.servername}}-cert.pem"
    dest: "{{nginx_ssl_path}}/{{item.servername}}/{{item.certname}}"
    owner: root
    group: root
    mode: 0644
    remote_src: yes
    force: "{{item.ssl_rewrite}}"
  when: item.cert_type == 'personal'
  with_items: "{{ nginx.vhosts }}"
  notify: reload nginx

- name: copy personal privkey
  copy:
    src: "{{nginx_tmp_personal}}/{{item.servername}}-priv.pem"
    dest: "{{nginx_ssl_path}}/{{item.servername}}/{{item.privkey}}"
    owner: root
    group: root
    mode: 0644
    remote_src: yes
    force: "{{item.ssl_rewrite}}"
  when: item.cert_type == 'personal'
  with_items: "{{ nginx.vhosts }}"
  notify: reload nginx


## clean section

- name: delete temp dir
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - "{{nginx_tmp_wild}}"
    - "{{nginx_tmp_personal}}"


#- name: debug certs
#  debug: msg="{{cert_out}}"
