---
- name: get vault data
  uri:
    url: "{{vault_url}}/v1/{{item.kv}}/data/{{item.appname}}/{{item.server}}/{{item.key_name}}"
    body_format: json
    headers:
      Accept: 'application/json'
      X-Vault-Token: "{{vault_normalized_access_token}}"
    method: GET
  register: key_value
  with_items: "{{vault.secret}}"

#- name: PRINT ALL  value
#  debug:
#    msg: "{{key_value}}"

- name: set list users secrets  - no_log enable
  set_fact:
    vault_list_users_secret: '{{ vault_list_users_secret|default([]) + [ {"key_name": item.item.key_name, "value": item.json.data.data.value} ] }}'
  with_items: "{{ key_value.results }}"
  no_log: True

- name: check value is not null
  fail: msg="secret {{item.key_name}} null, check our permission and secret"
  when: '"{{item.value}}" == ""'
  with_items: "{{ vault_list_users_secret }}"
  no_log: True

#- name: PRINT list user secret
#  debug:
#    msg: "{{vault_list_users_secret}}"

- name: set dict users secrets
  set_fact:
    vault_dict_users_secret: "{{ vault_list_users_secret | items2dict(key_name='key_name', value_name='value') }}"


#- name: PRINT vault_dict_users_secret
#  debug:
#    msg: "{{vault_dict_users_secret}}"

#- name: Template  debug copy
#  template:
#    src: test22.txt.j2
#    dest: /tmp/test22.txt


#- name: debug create postgres user
#  debug:
#    msg: "{{item.key_name}}"
#  with_items: "{{vault_list_users_secret }}"
#  when: item.key_name != "pg_postgres_pass"
