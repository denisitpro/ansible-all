---
- name: Check if kubeadm has already run - global
  ansible.builtin.stat:
    path: "/etc/kubernetes/pki/ca.key"
  register: kubeadm_ca

# - name: debug init host name - global
#   ansible.builtin.debug:
#     msg: k8s master init host "{{ k8s_master_init_host }}"

- name: Check if Kubernetes cluster is up and running - global
  ansible.builtin.command: kubectl --kubeconfig={{ kubeadmin_config }} cluster-info
  register: cluster_info
  failed_when: cluster_info.rc != 0 and kubeadm_ca.stat.exists
  changed_when: false
  ignore_errors: true
  delegate_to: "{{ k8s_master_init_host }}"
  tags:
    - k8s-check-cls


- name: print cluster info status - global
  ansible.builtin.debug:
    msg: cls info - "{{ cluster_info.rc }}"
  tags:
    - k8s-check-cls


- name: reset if k8s_reset_cls_force defined - global
  ansible.builtin.command: "kubeadm reset --force --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock"
  register: reset_cluster
  when: k8s_reset_cls_force is defined


- name: copy init config k8s-cluster - global
  ansible.builtin.template:
    src: "kubeadm-master-global.yaml.j2"
    dest: /tmp/kubeadm-config.yaml
    owner: root
    group: root
    mode: "0600"
  delegate_to: "{{ k8s_master_init_host }}"
  tags:
    - k8s-config-copy

# - name: debug comand launch
#   ansible.builtin.debug:
#     msg: print command join - "kubeadm init --config=/tmp/kubeadm-config.yaml --upload-certs {% if k8s_cni_network == 'cilium' %} --skip-phases=addon/kube-proxy{% endif %}"
#   delegate_to: "{{ k8s_master_init_host }}"

- name: Init Kubernetes cluster - manifest - global
  ansible.builtin.command: "kubeadm init --config=/tmp/kubeadm-config.yaml --upload-certs {% if k8s_cni_network == 'cilium' %} --skip-phases=addon/kube-proxy{% endif %}"
  when: (cluster_info.rc != 0 or k8s_reset_cls_force is defined)
  register: init_cluster
  ignore_errors: true
  delegate_to: "{{ k8s_master_init_host }}"
  tags:
    - k8s-init
    - k8s-init-cls

# - name: Store init output - need only for debug - global
#  action: copy content="{{ init_cluster.stdout }}" dest="/etc/kubernetes/kubeadm-init.stdout"
#  delegate_to: "{{k8s_master_init_host}}"
#  ignore_errors: yes
#  when: init_cluster.skipped == 'True'
#  tags:
#    - k8s-debug


- name: fetch the join command - global
  ansible.builtin.command: kubeadm token create --print-join-command
  register: k8s_join_token
  delegate_to: "{{ k8s_master_init_host }}"
#  when: not kubeadm_ca.stat.exists and (cluster_info.rc != 0 or k8s_reset_cls_force is defined)


# - name: debug join info - global
#  ansible.builtin.debug:
#    msg: token info for debug -  {{ k8s_join_token.stdout }}
#  delegate_to: k8s_master_init_host

# https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init-phase/
# very high kostili and velosiped
- name: fetch certificate - global
  ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs  | sed '3!D'
  register: k8s_cert
  delegate_to: "{{ k8s_master_init_host }}"
  run_once: true


# - name: debug cert info - global
#  ansible.builtin.debug:
#    msg: cert -  {{ k8s_cert.stdout }}
#  delegate_to: "{{k8s_master_init_host}}"
#  run_once: true
#  tags:
#    - k8s-debug

- name: Check if kubeadm has already run - repeat, need for skip join master - global
  ansible.builtin.stat:
    path: "/etc/kubernetes/pki/ca.key"
  register: kubeadm_ca


- name: join replica master to cluster - global
  ansible.builtin.command: "{{ k8s_join_token.stdout }} --control-plane --certificate-key {{ k8s_cert.stdout }}"
  when: (not kubeadm_ca.stat.exists or k8s_reset_cls_force is defined) and reset_cluster is succeeded


- name: Ensure /root/.kube directory exists
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
    mode: '0700'
  become: true
  when: kubecontext_master_default | default(false) | bool
  tags:
    - k8s-kubecontext


- name: Copy kubecontext to /root/.kube/config if kubecontext_master_default is true
  ansible.builtin.copy:
    src: "{{ kubeadmin_config }}"
    dest: /root/.kube/config
    owner: root
    group: root
    mode: '0600'
    remote_src: true
  become: true
  ignore_errors: true
  when: kubecontext_master_default | default(false) | bool
  tags:
    - k8s-kubecontext
