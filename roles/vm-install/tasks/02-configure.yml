---
- name: Set vm external metrics path
  ansible.builtin.set_fact:
    vm_metrics_path: "/{{ (vm_web_external_url + '/metrics') | regex_replace('^(.*://)?(.*?)/') }}"
  tags:
    - prom-reconfigure
    - update-prom-config

- name: Copy alerting rules file
  ansible.builtin.template:
    src: "alert.rules.j2"
    dest: "{{ vm_config_path }}/rules/ansible_managed.rules"
    owner: "{{ vm_user_uid }}"
    group: "{{ vm_user_gid }}"
    mode: '0640'
  when:
    - vm_alert_rules != []
  notify: reload docker vm
  tags:
    - alerts-rules
    - update-prom-config

- name: Validate vm rules
  ansible.builtin.command:
    cmd: "docker run --rm --entrypoint sh --name vm.check -v {{ vm_config_path }}:{{ vm_config_dir }} prom/vm:{{ vm_image }} -c '/bin/promtool check rules {{ vm_config_dir }}/rules/*'"
  register: promtool_rules_output
  changed_when: false
  failed_when: promtool_rules_output.rc != 0
  when:
    - vm_alert_rules != []
  tags:
    - alerts-rules
    - update-prom-config

- name: Copy vm config file
  ansible.builtin.template:
    src: "{{ vm_config_file }}"
    dest: "{{ vm_config_path }}/vm.yml"
    force: true
    owner: "{{ vm_user_uid }}"
    group: "{{ vm_user_gid }}"
    mode: '0640'
  notify: reload docker vm
  tags:
    - prom-reconfigure
    - update-prom-config

- name: Validate vm config
  ansible.builtin.command:
    cmd: "docker run --rm --entrypoint sh --name vm.check -v {{ vm_config_path }}:{{ vm_config_dir }} prom/vm:{{ vm_image }} -c '/bin/promtool check config {{ vm_config_dir }}/vm.yml'"
  register: promtool_config_output
  changed_when: false
  failed_when: promtool_config_output.rc != 0
  tags:
    - prom-reconfigure
    - update-prom-config
