---
- name: Check if kubeadm has already run - local
  stat:
    path: "/etc/kubernetes/pki/ca.crt"
  register: kubeadm_ca

- name: Check if Kubernetes cluster is up and running - local
  command: kubectl --kubeconfig={{ kubeadmin_config | default(' /etc/kubernetes/kubelet.conf') }} cluster-info
  register: cluster_info
  failed_when: cluster_info.rc != 0 and kubeadm_ca.stat.exists
  changed_when: false
  ignore_errors: true
  delegate_to: "{{k8s_master_init_host}}"
  tags:
    - k8s-check-cls

- name: Debug cluster info status - local
  ansible.builtin.debug:
    msg: "Cluster info - rc: {{ cluster_info.rc }}, CA exists: {{ kubeadm_ca.stat.exists }}"
  tags:
    - k8s-check-cls

- name: reset if k8s_force_join defined - local
  ansible.builtin.shell: "kubeadm reset --force --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock"
  register: reset_cluster
  when: k8s_force_join is defined


- name: fetch the join command - local
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: k8s_join_token
  delegate_to: "{{k8s_master_init_host}}"
  run_once: true
  tags:
    - k8s-token

- name: Set kubeadm join command as fact - local
  set_fact:
    kubeadm_join_command: "{{ k8s_join_token.stdout }}"
  tags:
    - k8s-token

#- name: debug join info - local
#  ansible.builtin.debug:
#    msg: token info for debug -  {{ k8s_join_token.stdout }}

- name: fetch certificate - local
  ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs  | sed '3!D'
  register: k8s_cert
  delegate_to: "{{k8s_master_init_host}}"
  run_once: true
  tags:
    - k8s-token

#- name: debug cert info - local
#  ansible.builtin.debug:
#    msg: cert -  {{ k8s_cert.stdout }}
#  delegate_to: "{{k8s_master_init_host}}"
#  run_once: true
#  tags:
#    - k8s-debug

- name: Extract caCertHashes - local
  set_fact:
    k8s_ca_cert_hash: "{{ kubeadm_join_command | regex_search('sha256:[a-f0-9]+') }}"
    k8s_join_token: "{{ kubeadm_join_command | regex_search('[a-z0-9]{6}\\.[a-z0-9]{16}') }}"
  delegate_to: "{{k8s_master_init_host}}"
  run_once: true
  tags:
    - k8s-token

- name: copy config join replica master to cluster - local
  template:
    src: "worker-node-join-manifest.yml"
    dest: /tmp/worker-node-join-manifest.yml
    owner: root
    group: root
    mode: 0600
  vars:
    master_ip: "{{ ansible_enp7s0.ipv4.address }}"
    controlPlaneEndpoint: "{{ k8s_cls_name | default('k8s.example.com') }}:{{ k8s_cls_port | default('6443') }}"
    bootstrap_token: "{{ k8s_join_token }}"
    caCertHashes:  "{{k8s_ca_cert_hash}}"
  tags:
    - k8s-join-config
    - k8s-token

- name: Join worker node use manifest - local
  ansible.builtin.shell: "kubeadm join --config=/tmp/worker-node-join-manifest.yml"
  when: (not kubeadm_ca.stat.exists or k8s_reset_cls_force is defined) and reset_cluster is succeeded
  delegate_to: "{{ inventory_hostname }}"


- name: Debug join condition - local
  ansible.builtin.debug:
    msg: "Should join: {{ not kubeadm_ca.stat.exists }}"